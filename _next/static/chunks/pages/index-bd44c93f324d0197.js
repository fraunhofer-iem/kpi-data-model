(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[405],{5301:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return n(27)}])},27:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return z}});var i=n(5893),a=n(7294),s=n(9777),r=n(6243),o=n(4733),l=n(9109),c=n.n(l),d={primary:function(e){return e?"primary:hover":"primary"},neutral:function(e){return e?"neutral:hover":"neutral"},anchor:function(e){return e?"anchor:hover":"anchor"}};function u(e){var t,n,s=(0,o.MS)().theme,r=(0,a.useState)(!1),l=r[0],u=r[1],p=d[e.context](l),m=null!==(t=e.action)&&void 0!==t?t:function(){},h=null!==(n=e.cxtAction)&&void 0!==n?n:function(){},y=s.button[p].css();return e.width&&(y.width=e.width),e.display&&(y.display=e.display),e.align&&(y.textAlign=e.align),e.padding&&(y.padding=e.padding),e.href?(0,i.jsx)("a",{className:c().btn,style:y,onMouseOver:function(){return u(!0)},onMouseLeave:function(){return u(!1)},onContextMenu:function(e){h(),e.preventDefault()},href:e.href,children:e.children}):(0,i.jsx)("button",{className:c().btn,style:y,onMouseOver:function(){return u(!0)},onMouseLeave:function(){return u(!1)},onClick:m,onContextMenu:function(e){h(),e.preventDefault()},type:e.type,disabled:e.disabled,children:e.children})}var p=n(5676),m=n.n(p);function h(e){var t,n=(0,o.MS)().theme.card.card.css();return n.width=null!==(t=e.width)&&void 0!==t?t:"auto",e.height&&(n.height=e.height),e.margin&&(n.margin=e.margin),(0,i.jsx)("div",{className:m().card,style:n,children:e.children})}function y(e){var t=(0,o.MS)().theme;return(0,i.jsxs)("div",{className:m().cardControls,style:t.card.dismissal.css(),children:[e.action&&(0,i.jsx)(u,{type:"button",context:"neutral",action:function(){return e.action()},children:"\u2501"}),e.dismiss&&(0,i.jsx)("div",{style:{float:"right"},children:(0,i.jsx)(u,{type:"button",context:"neutral",action:function(){return e.dismiss()},children:"\xd7"})})]})}function f(e){var t=(0,a.useState)(),n=t[0],s=t[1],o=(0,a.useState)(!1),l=o[0],c=o[1];return e.descriptionControl(s),(0,i.jsx)("div",{style:{position:"absolute",bottom:0,left:0,width:"100%"},children:(0,i.jsxs)(h,{width:"100%",height:l?"75vh":"150px",margin:"0",children:[(0,i.jsx)(y,{action:function(){return c(!l)}}),(0,i.jsx)(r.Z,{options:{createElement:function(t,n){for(var s=arguments.length,r=new Array(s>2?s-2:0),o=2;o<s;o++)r[o-2]=arguments[o];return"br"===t?(0,i.jsx)("br",{},n.key):"a"===t?n.href.endsWith(".md")?(0,i.jsx)(u,{context:"anchor",display:"inline",padding:"0",action:function(){return e.simulateTap(n.href.split(".")[0])},children:r},n.key):(0,i.jsx)(u,{context:"anchor",display:"inline",padding:"0",href:n.href,children:r},n.key):a.createElement(t,n,r)}},children:n?n.data("description"):e.readme})]})})}var g=n(9058),b=n.n(g),v=n(9142),I=n.n(v),T=n(578),w=n.n(T),P=function(e){e&&(e("core","nodeExpansion",(function(){this.nodes().forEach((function(e){e.data("expanded",!1),e.incomers().length&&e.style("visibility","hidden"),e.outgoers().length&&e.style("shape","diamond")}))})),e("collection","expanded",(function(){if(this.length>0){var e=this[0];return!!e.isNode()&&e.data("expanded")}})),e("collection","expand",(function(){if(this.length>0){var e=this[0];e.isNode()&&e.outgoers().length&&(e.data("expanded",!0),e.style("shape","ellipse"),e.outgoers("edge").forEach((function(e){e.style("visibility","visible"),e.target().style("visibility","visible")})))}})),e("collection","collapse",(function(){if(this.length>0){var e=this[0];e.isNode()&&(e.data("expanded",!1),e.outgoers("edge").forEach((function(t){e.style("shape","diamond");var n=t.target();n.style("visibility","hidden"),n.incomers("edge").forEach((function(t){var i=t.source();e.same(i)||i.data("expanded")&&n.style("visibility","visible")})),t.style("visibility","hidden"),n.collapse()})))}})))};"undefined"!==typeof cytoscape&&P(cytoscape);var E=P,x=n(1506);function _(e){var t=(0,a.useRef)(null),n=(0,a.useRef)(),s=(0,a.useRef)(),r=e.elements,o=e.layout,l=e.stylesheet;return(0,a.useEffect)((function(){(0,x.tg)(n.current,e)||(b().use(I()),s.current=b()({container:t.current,layout:o,elements:r,style:l}),s.current.nodes("$node > node").forEach((function(e){e.data("layout")&&e.descendants().layout(e.data("layout")).run()})),s.current.fit(),Object.getPrototypeOf(s.current).popper||b().use(w()),Object.getPrototypeOf(s.current).nodeExpansion||b().use(E),n.current=e);return e.cy&&e.cy(s.current),function(){var t;(0,x.tg)(n.current,e)||(null===(t=s.current)||void 0===t||t.destroy())}})),(0,i.jsx)("div",{ref:t,style:{width:"100%",height:"100%"}})}var K=n(2122),k=n.n(K);function L(e){var t=(0,o.MS)().theme.layout.container.css();return(0,i.jsx)("div",{className:k().container,style:t,children:e.children})}var A=n(9008);function S(e){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(A.default,{children:(0,i.jsx)("title",{children:e.title})}),(0,i.jsx)(L,{children:e.children})]})}var C=JSON.parse('{"readme":"# Overview\\nThis repository is used to define the fundamental data model to define a KPI system for KPI-based Process Management.\\n# KPI-based Process Management\\nThe basic idea of KPI-based Process Management is that all activities within a company can be represented and managed in the form of interrelated processes (compare ISO 9000 series). For this purpose KPI-based Process Management defines two fundamental elements: A domain-independent data model and the procedure for identification and specification of KPIs.\\n\\n## Data Model\\nThe data model is the basis for KPI-based Process Management. For this purpose, it represents all activities within a company as interrelated processes.\\n\\nWithin the data model, we focus on two different aspects of a company: \\n* The Process Environment represents the company in the form of interrelated processes and their process participants. \\n* The Process Management represents company goals, which combine assessment criteria with tolerance areas for the managed processes.\\n\\nA detailed description of the individual components can be found [here](https://github.com/fraunhofer-iem/kpi-data-model/tree/main/doc). Additionally, a graphical representation of the individual components and their interrelationships within the data model can be found [here](https://fraunhofer-iem.github.io/kpi-data-model/).\\n### Process Environment\\nIn the Process Environment, we define a hierarchical arrangement of Entities. An Entity represents any process participant. This can be organizational or physical parts of the company, such as, but not limited to, company, site, process, department, product, or data source. Company-specific hierarchy levels can contain Entities of different kinds, where leaf entities usually represent data sources. Note that we do not impose a strict tree structure for the Entity hierarchy: An Entity may have multiple parent Entities. Furthermore, we compile additional information on Entities useful for automated process assessment: Environmental Influences influence the behavior of an associated Entity. Note that the behavior of Entities, however, is not modeled directly, but an Entity may provide Features that realize its behavior. A Problem can interfere with an Entity of any hierarchical level and, thus, may impact an associated Feature of the Entity. Each Problem is composed of three elements: An Issue, a Cause, and a Solution. These elements did not change compared to our previous model.\\n### Process Management\\nIn the Process Management, we define a hierarchical arrangement of KPIs, analogous to the Entity hierarchy defined in the Process Environment. A KPI represents an Entity-specific company goal. Therefore, the KPI hierarchy mirrors the entity hierarchy, with KPIs relating to the Entity assigned to the company goal. A KPI aggregates data provided by Entities (mostly data sources) and/or subordinate KPIs and may assess individual Features of an associated Entity. Note that the hierarchical design of our data model allows KPIs of the same type to be aggregated across multiple levels. A KPI assesses its respective company goal using Limits. Limits represent acceptable value ranges for the underlying company goal. They consist of an Expected Value, at least one Bound, and a Category such as WARN or ERROR. A violated Bound of a Limit indicates a Problem, that interferes with the behavior of the Entity. Remember that Environmental Influences change the expected behavior of the associated Entity and, thus, the acceptable value range of the company goal. Therefore, a KPI can be associated with multiple Limits that depend on Environmental Influences.\\n\\n## Procedure for Identification and Specification of KPIs\\nTBD\\n","title":"KPI-based Process Management","center":"entity","layout":{"name":"preset","avoidOverlap":true,"positions":{"entity":{"x":0,"y":0},"feature":{"x":100,"y":75},"entityType":{"x":200,"y":0},"influence":{"x":0,"y":-150},"influenceType":{"x":0,"y":-250},"problem":{"x":-200,"y":0},"issue":{"x":-350,"y":-100},"issueType":{"x":-500,"y":-100},"cause":{"x":-350,"y":0},"causeType":{"x":-500,"y":0},"solution":{"x":-350,"y":100},"solutionType":{"x":-500,"y":100},"kpi":{"x":0,"y":150},"kpiType":{"x":200,"y":150},"rule":{"x":0,"y":250},"ruleType":{"x":200,"y":250},"limit":{"x":-200,"y":150},"limitType":{"x":-200,"y":250}}},"nodes":[{"id":"entityGroup","children":[{"id":"entity","name":"Entity","description":"# Entity\\nAn entity represents any organizational or physical part of the company, such as, but not limited to, company, site, process, department, product, or data source.  \\nIn order to be able to perform a detailed analysis, we collect additional information on entities:\\n1. Entities may be subject to (environmental) [influences](influence.md) that change their expected behavior\\n2. Entities may be assigned a set of [problems](problem.md), that either occured previously or are surmised to be possible.\\n3. Entites are [hierarchically](entityHierarchy.md) organized mirroring the company and product structure.\\n\\n## Example(s)\\n* **Production**:\\n  An ATM is composed of two separate units: the safe and the head. Notes are transported from cassettes in the safe to the output tray in the head using conveyor belts. The note transport is observed using light sensors.  \\n  All of these parts mentioned above is represented by its own entity within the data model.\\n\\n## Related Elements\\n* [Entity Type](entityType.md): object, that distinguishes i.e. data sources from products\\n* [Entity Hierarchy](entityHierarchy.md): information on the hierarchical structure of the entity\\n* [Influence](influence.md): environmental influence that change the entity\'s expected behavior\\n* [Problem](problem.md): collection of [issues](issue.md), [causes](cause.md), and [solutions](solution.md)\\n* [Feature](feature.md): collection of features the entity helps to realize\\n\\n## Implementation Details\\n|**Entity**|\\n|:----:|\\n|id: int|\\n|name: str|\\n|datasource_identifier: str|\\n|entity_type_id: int|\\n|company_id: str|\\n\\nThe attribute `datasource_identifier` is only set on data sources and helps identify the entity within the test data (during analysis).\\n"},{"id":"entityType","name":"Entity Type","description":"# Entity Type\\nAn [entity](entity.md) type distinguishes the different kinds of entities from each other.\\n\\n## Example(s)\\n* **Production**\\n  Entities representing a complete ATM are assigned the `ProductEntityType`.  \\n  Entities representing logical units within an ATM, are assigned the `ComponentEntityType`.  \\n  Entities representing physical units, that provide data, are assigned the `DataSourceEntityType`.  \\n\\n## Related Elements\\n* [Entity](entity.md): instances of the entity type\\n* [Feature](feature.md): collection of features, that can be (partly) realized by instances of the entity type \\n\\n## Implementation Details\\nEach entity type is given its own model within the database:\\n|**Company Entity Type**|**Proess Entity Type**|**Product Entity Type**|**Component Entity Type**|**Data Source Entity Type**|\\n|:--:|:--:|:--:|:--:|:--:|\\n|id: int|id: int|id: int|id: int|id: int|\\n|name: str|name: str|name: str|name: str|name: str|\\n|description: str|description: str|description: str|description: str|description: str|\\n|||||unit: str|\\n\\nEntities, however, reference an intermediate model:\\n|**Entity Type**|\\n|:--:|\\n|id: int|\\n|company_entity_type_id|\\n|process_entity_type_id|\\n|product_entity_type_id|\\n|component_entity_type_id|\\n|datasource_entity_type_id|\\n\\nThat way, the `Entity` model only needs to hold a reference to `Entity Type`, which is internally cast to the specific entity type.\\n\\n"}]},{"id":"feature","name":"Feature","description":"# Feature\\n[Entities](entity.md) perform specific functions in order to realize features desired for the process.  \\n\\n## Example(s)\\n* **Production**:\\n  Entities within ATMs work towards the feature of note transport.\\n\\n## Related Elements\\n* [Entity Type](entityType.md): entities of these entity types may realize this feature\\n* [Entity](entity.md): specific entities that (partly) realize this feature\\n* [KPI](kpi.md): specific KPIs that monitor this feature\\n* [Problem](problem.md): specific problems that impact this feature\\n\\n## Implementation Details\\n|**Feature**|\\n|:--:|\\n|id: int|\\n|name: str|\\n|description: str|\\n|company_id: str|"},{"id":"influenceGroup","children":[{"id":"influence","name":"Influence","description":"# Influence\\n[Entities](entity.md) are subject to different influences during process execution. Such influences range from environmental influences, such as altitude or temperature, to organizational influences, such as team size.  \\nFor each entity, the customer can select specific manifestations of influences from a general list of possible influences (see [influence type](influenceType.md)).  \\nWe use this information to dynamically select a [KPI\'s](kpi.md) [limits](limit.md).\\n\\n## Example(s)\\n* **Production**:\\n  ATMs may be operated in a humid and warm location, which requires different tolerances for mechanical parts. By specifying `humidity` and `temperature` influences for the affected entities, the respective KPIs can be assigned limits that are valid only for such environments.\\n\\n* **Software Development**:\\n  Development teams vary in size. For a larger team, it is realistic to expect bugs to be fixed quicker than a smaller team would. By specifying the `team size` influence, fault correction KPIs can be assigned limits that grant smaller teams more time to fix a bug.\\n\\n## Related Elements\\n* [Entity](entity.md): the entity affected by this influence\\n* [Influence Type](influenceType.md): general information on this influence\\n* [Limit Influences](limitInfluences.md): information on which limit is only valid with this influence present\\n\\n## Implementation Details\\n|**Influence**|\\n|:---:|\\n|id: int|\\n|lower_bound: float|\\n|upper_bound: float|\\n|category: str|\\n|influence_type_id: int|\\n\\nWe support categorical and range influences. `category` is only allowed to be set, if the referenced influence type has its `value_type` set to `CATEGORICAL`.\\n"},{"id":"influenceType","name":"Influence Type","description":"# Influence Type\\nAn influence type is a description of an influence that may affect [entities](entity.md) of a specific kind.  \\nWe support categorical and range influences. A categorical influence has a text value, i.e. a named location. A range influence has a value consisting of a lower and upper limit, i.e. a range of acceptable temperatures.\\n\\n## Example(s)\\n* **Production**:\\n  Humidity, Altitude, Temperature\\n\\n## Related Elements\\n* [Influence](influence.md): entity-specific instances of this influence type\\n\\n## Implementation Details\\n|**Issue Type**|\\n|:--:|\\n|id: int|\\n|name: str|\\n|description: str|\\n|value_type: str|\\n|company_id: str|"}]},{"id":"problemGroup","children":[{"id":"problem","name":"Problem","description":"# Problem\\nProblems describe specific error situations, that may occur in the [entity](entity.md) referenced by the [KPI](kpi.md) the [limit](limit.md) is assigned to.  \\nIn more detail, a limit problem shows, depending on the violated bound, which of the entity\'s [issues](issue.md) occurs. Additionally, it specifies one of the issue\'s [causes](cause.md) as explanation, and suggests one of the cause\'s [solutions](solution.md) to resolve the error.  \\nA limit can have multiple limit problems per bound. In this case, we require a prioritization in order to be able to list the problems in descending order of probability.\\n\\n## Example(s)\\n* **Production**:\\n  Within ATMs, the note transport path is divided into segments, observed by light sensors detecting passing notes. For each segment, the length of the segment and the travel speed of notes is known. Thus, we can derive an expected travel time for notes along a segment.  \\n  If the KPI `NoteTransportTime`<sub>`L1, L2`</sub> (see [KPI](kpi.md)) detects an error (see [limit](limit.md), the conveyor belt between `L1` and `L2` may move too slowly due to its motor not receiving enough power. The situation may be resolved by replacing the motor.\\n\\n## Related Elements\\n* [Issue](issue.md)\\n* [Cause](cause.md)\\n* [Solution](solution.md)\\n* [Limit](limit.md)\\n* [Feature](feature.md)\\n\\n## Implementation Details\\n|**Problem**|\\n|:----:|\\n|id: int|\\n|limit_id: int|\\n|issue_id: int|\\n|cause_id: int|\\n|solution_id: int|\\n|violated_bound: str|\\n|priority: int|\\n\\n\\n\\n"},{"id":"issue","name":"Issue","description":"# Issue\\nIn order to provide KPI-based feedback, we require information on issues that can potentially occur in an [entity](entity.md). For each entity, the customer can select its potential issues from a general list of known issues (see [issue type](issueType.md)). Similarly, the customer has to select the potential [causes](cause.md) of each issue.\\n\\n## Example(s)\\n* **Production**:\\n  Within ATMs, the note transport path is divided into segments, observed by light sensors detecting passing notes. For each segment, the length of the segment and the travel speed of notes is known. Thus, we can derive an expected travel time for notes along a segment.  \\n  A potential issue of the entity representing the transport path segment between light sensors `L1` and `L2` is a motor moving its conveyor belt(s) too slowly.\\n\\n## Related Elements\\n* [Issue Type](issueType.md): general information on this issue\\n* [Cause](cause.md): potential causes of this issue\\n* [Entity](entity.md): entity this issue can occur in\\n* [Problem](problem.md): specific combination of issue, cause and solution detected by a violated limit\\n\\n## Implementation Details\\n|**Issue**|\\n|:--:|\\n|id: int|\\n|issue_type_id: int|\\n|entity_id: int|"},{"id":"issueType","name":"Issue Type","description":"# Issue Type\\nAn issue type is a description of an issue that is known to occur in [entities](entity.md) of a specific kind.\\n\\n## Example(s)\\n* **Production**:\\n  Motors of any kind can be moving slowly.\\n\\n## Related Elements\\n* [Issue](issue.md): entity-specific instances of this issue type\\n\\n## Implementation Details\\n|**Issue Type**|\\n|:--:|\\n|id: int|\\n|name: str|\\n|description: str|\\n|company_id: str|"},{"id":"cause","name":"Cause","description":"# Cause\\nIn order to provide KPI-based feedback, we require information on what may cause an [issue](issue.md) to occur. For each issue, the customer can select its potential causes from a general list of known causes (see [cause type](causeType.md)). Similarly, the customer has to select the potential [solutions](cause.md) of each cause.\\n\\n## Example(s)\\n* **Production**:\\n  Within ATMs, the note transport path is divided into segments, observed by light sensors detecting passing notes. For each segment, the length of the segment and the travel speed of notes is known. Thus, we can derive an expected travel time for notes along a segment.  \\n  A potential issue of the entity representing the transport path segment between light sensors `L1` and `L2` is a motor moving its conveyor belt(s) too slowly. A potential cause may be the motor drawing not enough power.\\n\\n## Related Elements\\n* [Cause Type](causeType.md): general information on this cause\\n* [Solution](solution.md): potential solutions of this cause\\n* [Problem](problem.md): specific combination of issue, cause and solution detected by a violated limit\\n\\n## Implementation Details\\n|**Cause**|\\n|:--:|\\n|id: int|\\n|cause_type_id: int|\\n|issue_id: int|"},{"id":"causeType","name":"Cause Type","description":"# Cause Type\\nA cause type is a description of a cause that has been previously determined as a reason of an [issue](issue.md)\\n\\n## Example(s)\\n* **Production**:\\n  Motors moving slowly may not draw enough power.\\n\\n## Related Elements\\n* [Cause](cause.md): issue-specific instances of this cause type\\n\\n## Implementation Details\\n|**Cause Type**|\\n|:--:|\\n|id: int|\\n|name: str|\\n|description: str|\\n|company_id: str|"},{"id":"solution","name":"Solution","description":"# Solution\\nIn order to provide KPI-based feedback, we require information on what may resolve an [issue](issue.md). For each cause of an issue, the customer can select its potential solutions from a general list of known solutions (see [solution type](solutionType.md)).\\n\\n## Example(s)\\n* **Production**:\\n  Within ATMs, the note transport path is divided into segments, observed by light sensors detecting passing notes. For each segment, the length of the segment and the travel speed of notes is known. Thus, we can derive an expected travel time for notes along a segment.  \\n  A potential issue of the entity representing the transport path segment between light sensors `L1` and `L2` is a motor moving its conveyor belt(s) too slowly. A potential cause may be the motor drawing not enough power. A potential solution may be to replace a power adaptor or the motor itself.\\n\\n## Related Elements\\n* [Cause Type](causeType.md): general information on this cause\\n* [Solution](solution.md): potential solutions of this cause\\n* [Problem](problem.md): specific combination of issue, cause and solution detected by a violated limit\\n\\n## Implementation Details\\n|**Cause**|\\n|:--:|\\n|id: int|\\n|cause_type_id: int|\\n|issue_id: int|"},{"id":"solutionType","name":"Solution Type","description":"# Solution Type\\nA solution type is a description of a solution that has previously resolved an [issue](issue.md).\\n\\n## Example(s)\\n* **Production**:\\n  Motors moving too slowly, due to not drawing enough power, may be resolved by replacing a power adaptor.\\n\\n## Related Elements\\n* [Solution](solution.md): cause-specific instances of this solution type\\n\\n## Implementation Details\\n|**Solution Type**|\\n|:--:|\\n|id: int|\\n|name: str|\\n|description: str|\\n|company_id: str|"}]},{"id":"kpiGroup","children":[{"id":"kpi","name":"KPI","description":"# KPI\\nKPIs serve three purposes:\\n1. **Representation**: KPIs represent a reference value correlating with the performance of the process as a whole or a process participant.\\n2. **Calculation**: KPIs combine data from other KPIs and entities in order to calculate their reference values. Note, that KPIs can only use [calculation elements](calculationElement.md) that are positioned lower within the [KPI](kpiHierarchy.md) or [entity](entityHierarchy.md) hierarchies. Otherwise, there is a risk of introducing circular dependencies.  \\n[Rules](rule.md) contain the actual calculation logic.\\n3. **Evaluation**: KPIs assess the performance of their referenced entity and point out potential problems in accordance to the [limits](limit.md) assigned to them.\\n\\n## Example(s)\\n* **Production**:  \\n  Within ATMs, the note transport path is divided into segments, observed by light sensors detecting passing notes. For each segment, the length of the segment and the travel speed of notes is known. Thus, we can derive an expected travel time for notes along a segment.  \\n  We define `NoteTransportTime`<sub>`L1, L2`</sub> as a KPI, that is assigned to entity `L1, L2`. `L1, L2` represents the transport path segment between light sensors `L1` and `L2` and is a parent of both in the entity hierarchy. Therefore, `NoteTransportTime`<sub>`L1, L2`</sub> can use light sensors `L1` and `L2` as its calculation elements. Its `rules` calculate the average travel time of notes along this segment. Its `limits` evaluate if the average travel time strays too far from the expected value.    \\n\\n## Related Elements\\n* [KPI Type](kpiType.md): object, that contains general information on the KPI\\n* [Entity](entity.md): the process (participant) the KPI\'s reference value targets \\n* [Calculation Element](calculationElement.md): entities or KPIs that serve as the KPI\'s data sources\\n* [Rule](rule.md): object, that contains the calculation logic specific to a single KPI\\n* [Limit](limit.md): object, that enables automated evaluation and feedback\\n\\n## Implementation Details\\n|**KPI**|\\n|:----:|\\n|id: int|\\n|name: str|\\n|entity_id: int|\\n|kpi_type_id: int|\\n"},{"id":"kpiType","name":"KPI Type","description":"# KPI Type\\nA KPI type describes a reference value in general.  \\nFor each [entity](entity.md), that is subject to this reference value, a [KPI](kpi.md) of this type is instantiated.  \\nThe KPI type lists which [features](feature.md) are evaluated by its instances. Furthermore, KPI types are organized [hierarchically](kpiTypeHierarchy.md) placing restrictions on the KPI [hierarchy](kpiHierarchy.md).\\n\\n## Example(s)\\n* **Production**: \\n  Within ATMs, the note transport path is divided into segments, observed by light sensors detecting passing notes. For each segment, the length of the segment and the travel speed of notes is known. Thus, we can derive an expected travel time for notes along a segment.  \\n  For each segment, a KPI of the type `NoteTransportTime` is instantiated. It monitors, among others, the feature `Note Transport`.  \\n  `NoteTransportTime` is a sub-type of `TransportQuality`. Therefore, `NoteTransportTime` instances can neither serve as parents of `TransportQuality` instances nor use `TransportQuality` instances as calculation elements.\\n\\n## Related Elements\\n* [KPI](kpi.md): entity-specific instance of the KPI type\\n* [Feature](feature.md): collection of features evaluated by instances of the KPI type\\n* [KPI type hierarchy](kpiTypeHierarchy.md): hierarchy information on KPI types\\n\\n## Implementation Details\\n|**KPI Type**|\\n|:----:|\\n|id: int|\\n|name: str|\\n|description: str|\\n|company_id: str|\\n\\nCurrently, each customer has to define their own KPI types. In the future, we intend to provide \'public\' KPI types that can be used by all customers."},{"id":"rule","name":"Rule","description":"# Rule\\nThe KPI calculation is split into two phases:\\n1. interpretation\\n2. combination\\n\\nIn the interpretation phase, the data provided to the KPI via its [calculation elements](calculationElement.md) is prepared for the remaining KPI calculation.  \\nIn the combination phase, the prepared data is reduced to a single value. This value is evaluated against the KPI\'s [limits](limit.md).\\n\\nKPIs define one rule for each phase. Rules specify calculation instructions using an expression language such as [Google\'s CEL](https://github.com/google/cel-spec/).\\n\\n## Example(s)\\n* **Production**:  \\n  Within ATMs, the note transport path is divided into segments, observed by light sensors detecting passing notes. For each segment, the length of the segment and the travel speed of notes is known. Thus, we can derive an expected travel time for notes along a segment.  \\n  The KPI `NoteTransportTime`<sub>`L1, L2`</sub> (see [KPI](kpi.md)) calculates the average note travel time along the `L1, L2` segment. Therefore, it obtains all data collected by light sensors `L1` and `L2`. \\n  In the interpretation phase, the light sensors\' data is filtered for the `SENSOR_COVERED` event and sorted by time. For each note `N`, it\'s travel time is calculated as the time difference between `SENSOR_COVERED` events triggered by `N` at `L1` and subsequently at `L2`. The individual travel times are collected in a list.\\n  In the combination phase, the list of individual travel times is reduced to it\'s average.\\n\\n## Related Elements\\n* [KPI](kpi.md): KPI this rule is assigned to\\n* [Rule Type](ruleType.md): object, that distinguishes interpretation and combination rules\\n\\n## Implementation Details\\n|**Rule**|\\n|:----:|\\n|id: int|\\n|name: str|\\n|description: str|\\n|rule: str|\\n|rule_type_id: int|\\n|kpi_id: int|\\n|company_id: str|"},{"id":"ruleType","name":"Rule Type","description":"# Rule Type\\nA [rule](rule.md) type denotes which phase of the KPI calculation the associated rule contains calculation instructions for.\\n\\n## Example(s)\\nRules can only be of type `INTERPRETATION` or `COMBINATION`, following the KPI calculation phases (see [rule](rule.md)).\\n\\n## Related Elements\\n* [Rule](rule.md): instances of the rule type\\n\\n## Implementation Details\\n|**Rule Type**|\\n|:--:|\\n|id: int|\\n|name: str|\\n|description: str|\\n\\nCurrently, rule types cannot be defined by customers."},{"id":"limit","name":"Limit","description":"# Limit\\nLimits represent acceptable value ranges for [KPI](kpi.md) it is assigned to. A limit consists of an expected value, at least one bound, and a [type](limitType.md).  \\nA violated bound indicates a [problem](problem.md), that interferes with the behavior of the [entity](entity.md) referenced by the limit\'s KPI.  \\nMultiple limits of a single type can be assigned to a single KPI. During evaluation, a KPI\'s currently valid limits are selected using the [limit\'s influences](limitInfluences.md)\\n\\n## Example(s)\\n* **Production**\\n  Within ATMs, the note transport path is divided into segments, observed by light sensors detecting passing notes. For each segment, the length of the segment and the travel speed of notes is known. Thus, we can derive an expected travel time for notes along a segment.  \\n  Along the segment `L1, L2`, notes are expected to be transported in 1 second. However, deviations of 0.25 seconds are considered acceptable. Therefore, the KPI `NoteTransportTime`<sub>`L1, L2`</sub> (see [KPI](kpi.md)) is assigned a limit of type `ERROR` with an expected value of `1`, a lower bound of `0.75`, and an upper bound of `1.25`.\\n\\n## Related Elements\\n* [KPI](kpi.md): KPI this limit is assigned to\\n* [Limit Type](limitType.md): object, that describes the kind of incident occuring if a limit bound is violated \\n* [Limit Problem](problem.md): set of problems, that may be the cause of the incident\\n* [Limit Influences](limitInfluences.md): selects, if limit is valid for the current execution context\\n\\n## Implementation Details\\n|**Limit**|\\n|:---:|\\n|id: int|\\n|lower_bound: float|\\n|upper_bound: float|\\n|expected_value: float|\\n|limit_type_id: int|\\n|kpi_id: int|"},{"id":"limitType","name":"Limit Type","description":"# Limit Type\\nLimit types provide a way to describe the kind of incidents detected by [limits](limit.md).\\n\\n## Example(s)\\nThe limit type `WARNING` indicates that the limit indicates impending problems but does not require immediate action.  \\nThe limit type `ERROR`, however, indicates that the limit detects incidents that require immediate resolution.  \\n\\n## Related Elements\\n* [Limit](limit.md): instances of the limit type\\n\\n## Implementation Details\\n|**Limit Type**|\\n|:--:|\\n|id: int|\\n|name: str|\\n|company_id: str|\\n\\nCustomers can freely define their own limit types.\\n"}]},{"id":"calculationElement","name":"Calculation Element","description":"# Calculation Element\\n[KPIs](kpi.md) can use any combination of [entities](entity.md) and other KPIs during calculation.  \\nCalculation elements encapsulate a KPI or entity object in order to provide an easy way to reference these objects necessary for the KPI\'s calculation.\\n\\n## Example(s)\\n\\n\\n## Related Elements\\n* [KPI](kpi.md): encapsulated KPI object\\n* [Entity](entity.md): encapsulated entity object\\n\\n## Implementation Details\\n|**Calculation Element**|\\n|:--:|\\n|id: int|\\n|kind: str|\\n|entity_id: int|\\n|kpi_id: int|\\n\\nThe `kind` attribute is used to ensure validity of the calculation element object, i.e. to avoid setting both `entity_id` and `kpi_id` attributes at the same time. It can be set to either `KPI` or `ENTITY`.\\n","hidden":true},{"id":"entityHierarchy","name":"Entity Hierarchy","description":"# Entity Hierarchy\\nThe [entity](entity.md) hierarchy contains the structure of the process and its participants.  \\nNote, that we do not impose a strict tree structure for the entity hierarchy: an entity may have multiple parent entities. It is also possible for hierarchy levels to contain entities of different [types](entityType.md). However, we restrict the entities\' parent-child relationships based on their types:\\n1. Instances of company, process and product entity types are roots to their own sub-hierarchies\\n2. Instances of component and data source entity types can not be part of multiple sub-hierarchies\\n3. Instances of data source entity types are not allowed to have children\\n4. Cycles are not allowed to occur\\n\\n## Example(s)\\n* **Production**:\\n  An simplified ATM consists of a `Safe` and `Head` component entities.  \\n  The `Safe` entity contains several `Cassette` component entities. The `Cassette` entities contain several `Conveyor Belt` component entities.  \\n  The `Head` entity contains several `Conveyor Belt` component entities. Additionally, it contains a `Output Tray` component entity.\\n  Each `Conveyor Belt` entity is parent to two `Light Sensor` data source entities, which are used to monitor the note transport process. Note, that two `Conveyor Belt` entities share at least one `Light Sensor` entity.\\n\\n## Related Elements\\n* [Entity](entity.md): hierarchically organized entities\\n\\n## Implementation Details\\n|**Entity Hierarchy**|\\n|:--:|\\n|parent_id: int|\\n|child_id: int|","hidden":true},{"id":"kpiHierarchy","name":"KPI Hierarchy","description":"# KPI Hierarchy\\nAnalogously to [entities](entityHierarchy.md), [KPIs](kpi.md) are also hierarchically organized. Since KPIs are entity-specific, the KPI hierarchy mirrors the entity hierarchy. However, a single entity may be assigned multiple KPIs. In this case, the entity-specific KPI hierarchy additionally has to follow the [KPI type hierarchy](kpiTypeHierarchy.md).\\n\\n## Example(s)\\n* **Production**:\\n  Within ATMs, the note transport path is divided into segments, observed by light sensors detecting passing notes. For each segment, the length of the segment and the travel speed of notes is known. Thus, we can derive an expected travel time for notes along a segment.  \\n  For each segment, a `NoteTransportTime`<sub>`<segment identifier>`</sub> KPI is defined mirroring the hierarchical entity structure. Additionally, `NoteTransportTime`<sub>`<multiple segment identifier>`</sub> KPIs may be defined at overarching component entities such as `Safe`. These KPIs aggregate the individual segments\' KPIs to provide a quick overview of `NoteTransportTime` (KPIs can always be children of other KPIs of the same type).\\n\\n## Related Elements\\n* [KPI](kpi.md): hierarchically organized KPIs.\\n* [KPI type hierarchy](kpiTypeHierarchy.md): additional restrictions on the KPI hierarchy\\n\\n## Implementation Details\\n|**KPI Hierarchy**|\\n|:--:|\\n|parent_id: int|\\n|child_id: int|","hidden":true},{"id":"limitInfluences","name":"Limit Influences","description":"# Limit Influences\\nThe acceptable value ranges of reference values depend on the environmental [influences](influence.md) an [entity](entity.md) is currently subject to.  \\nTherefore, we define a [limit](limit.md) for each possible constellation of influences assigned to the entity.  \\nLimit influences denote for which influence constellation the respective limit is valid. During evaluation, we ignore a limit if any of its limit influences did not manifest.\\n\\n## Example(s)\\n* **Production**\\n  Within ATMs, the note transport path is divided into segments, observed by light sensors detecting passing notes. For each segment, the length of the segment and the travel speed of notes is known. Thus, we can derive an expected travel time for notes along a segment.  \\n  Along the segment `L1, L2`, notes are expected to be transported in 1 second. However, if the ATM is operated at higher altitudes, the reduced air resistance results in quicker transportation times. Therefore, the KPI `NoteTransportTime`<sub>`L1, L2`</sub> (see [KPI](kpi.md)) is assigned two limits. One for operation at regular altitudes, another for operation at high altitudes.\\n\\n## Related Elements\\n* [Limit](limit.md): depending limit\\n* [Influence](influence.md): required influence\\n\\n## Implementation Details\\n|**Limit Influences**|\\n|:---:|\\n|limit_id: int|\\n|influence_id: int|\\n","hidden":true}],"edges":[{"source":"entity","target":"entity","arrowShape":"diamond"},{"source":"entity","target":"entityType","arrowShape":"triangle"},{"source":"entity","target":"influence","arrowShape":"diamond","targetLabel":"0..*","style":{"target-text-margin-x":18,"target-text-margin-y":7}},{"source":"influence","target":"influenceType","arrowShape":"triangle"},{"source":"entity","target":"problem","targetLabel":"0..*","style":{"target-text-margin-x":18,"target-text-margin-y":-7}},{"source":"issue","target":"issueType","arrowShape":"triangle"},{"source":"cause","target":"causeType","arrowShape":"triangle"},{"source":"solution","target":"solutionType","arrowShape":"triangle"},{"source":"issue","target":"cause","targetLabel":"1..*","style":{"target-text-margin-x":15,"target-text-margin-y":-6}},{"source":"cause","target":"solution","targetLabel":"1..*","style":{"target-text-margin-x":15,"target-text-margin-y":-6}},{"source":"entity","target":"kpi","arrowShape":"diamond","targetLabel":"0..*","style":{"target-text-margin-x":-15,"target-text-margin-y":-5}},{"source":"kpi","target":"kpi","arrowShape":"diamond"},{"source":"kpi","target":"kpiType","arrowShape":"triangle"},{"source":"kpiType","target":"kpiType","arrowShape":"diamond"},{"source":"kpi","target":"rule","arrowShape":"diamond","targetLabel":"2","style":{"target-text-margin-x":12,"target-text-margin-y":-5}},{"source":"rule","target":"ruleType","arrowShape":"triangle"},{"source":"kpi","target":"limit","arrowShape":"diamond","targetLabel":"1..*","style":{"target-text-margin-x":12,"target-text-margin-y":-10}},{"source":"limit","target":"limitType","arrowShape":"triangle"},{"source":"limit","target":"problem","arrowShape":"diamond","targetLabel":"1..*","style":{"target-text-margin-x":15,"target-text-margin-y":10}},{"source":"limit","target":"influence","straight":true,"targetLabel":"1..*","style":{"target-text-margin-x":-20,"target-text-margin-y":10}},{"source":"problem","target":"feature","straight":true},{"source":"problem","target":"issue","arrowShape":"diamond","targetLabel":"1","style":{"taxi-turn":"50px","target-text-margin-x":10,"target-text-margin-y":12}},{"source":"problem","target":"cause","arrowShape":"diamond","targetLabel":"1","style":{"target-text-margin-x":10,"target-text-margin-y":12}},{"source":"problem","target":"solution","arrowShape":"diamond","targetLabel":"1","style":{"taxi-turn":"50px","target-text-margin-x":10,"target-text-margin-y":12}},{"source":"entity","target":"feature","straight":true},{"source":"entityType","target":"feature","straight":true},{"source":"kpiType","target":"feature","straight":true}]}');function R(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function j(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"===typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){R(e,t,n[t])}))}return e}var O=function(e){var t=e.id,n=e.label,i=e.kind,a=e.additionalAttributes;return{data:j({id:"".concat(t),label:null!==n&&void 0!==n?n:"",kind:"".concat(i),entity:"".concat(t)},a)}};function N(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function M(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},i=Object.keys(n);"function"===typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),i.forEach((function(t){N(e,t,n[t])}))}return e}function D(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function F(e){return function(e){if(Array.isArray(e))return D(e)}(e)||function(e){if("undefined"!==typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"===typeof e)return D(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return D(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var H=function(e,t){var n,i=[];e.hasOwnProperty("children")?(e=e,i.push(O({id:e.id,additionalAttributes:{layout:e.layout,hidden:e.hidden}})),e.children.forEach((function(t){var n;(n=i).push.apply(n,F(H(t,e.id)))}))):(e=e,i.push(O({id:e.id,label:e.name,additionalAttributes:{description:null!==(n=e.description)&&void 0!==n?n:"",hinge:e.hinge,hidden:e.hidden,parent:t}})));return i},W=(0,s.Z)((function(e){var t,n=(0,o.MS)().theme,s=(0,a.useRef)(),r=(0,a.useRef)(),l=e.setTippy,c=[],d=C;d.hasOwnProperty("nodes")&&d.nodes.forEach((function(e){var t;(t=c).push.apply(t,F(H(e)))})),d.hasOwnProperty("edges")&&d.edges.forEach((function(e){c.push(function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:void 0,s={data:M({id:"".concat(e,"-").concat(t),source:e,target:t,directed:n},i)};return void 0!==a&&(s.style=a),s}(e.source,e.target,e.directed,{label:e.label,sourceLabel:e.sourceLabel,targetLabel:e.targetLabel,straight:e.straight,arrowShape:e.arrowShape},e.style))}));var u=(0,a.useCallback)((function(e){r.current!=e&&(d.hasOwnProperty("center")&&e.center(e.getElementById(d.center)),e.on("mouseover","node",(function(e){var t=e.target;t.isParent()||(l(t.id(),{content:(0,i.jsx)(i.Fragment,{}),popperRef:t.popperRef(),dispose:function(){return t.data("hover",!1)},tippyProps:{placement:"right"}}),t.data("hover",!0))})),e.on("mouseout","node",(function(e){var t=e.target;t.isParent()||l(t.id(),{content:void 0,popperRef:void 0})})),e.on("tap",(function(){e.nodes().removeData("tapped"),s.current(void 0)})),e.on("tap","node",(function(t){var n=t.target;n.isParent()||(n.data("tapped")?(n.removeData("tapped"),s.current(void 0)):(e.nodes().removeData("tapped"),n.data("tapped",!0),s.current(n)))})),r.current=e)}),[l,d]),p=(0,a.useCallback)((function(e){s.current=e}),[]),m=(0,a.useCallback)((function(e){r.current.getElementById(e).emit("tap")}),[]);return(0,i.jsxs)(S,{title:d.title,children:[(0,i.jsx)("div",{style:{height:"calc(100vh - 150px)",width:"100%"},children:(0,i.jsx)(_,{cy:u,elements:c,layout:d.layout,stylesheet:null===(t=n.cytoscape)||void 0===t?void 0:t.canvas})}),(0,i.jsx)(f,{readme:d.readme,descriptionControl:p,simulateTap:m})]})})),z=W},9109:function(e){e.exports={btn:"Button_btn__gZGom"}},5676:function(e){e.exports={card:"Card_card__MdBWe",cardControls:"Card_cardControls__DVxR9",cardDismissal:"Card_cardDismissal__wcfQg",cardTitle:"Card_cardTitle__AvJG5",cardSubTitle:"Card_cardSubTitle__guPa3",cardImage:"Card_cardImage__eebwX",cardBody:"Card_cardBody__S_jTh",cardAction:"Card_cardAction__1KmJE"}},2122:function(e){e.exports={container:"Container_container__6kKex"}}},function(e){e.O(0,[856,780,774,888,179],(function(){return t=5301,e(e.s=t);var t}));var t=e.O();_N_E=t}]);